/**
 * @file mesh.cpp
 * @author Rakesh Shrestha, rakeshs@sfu.ca
 */

#include <p2mpp_depth_renderer/mesh.h>

#include <iostream>
#include <fstream>

using namespace p2mpp_depth_renderer;

bool Mesh::loadObj(const std::string &obj_file, const std::string &mtl_basedir)
{
    std::string warn;
    std::string err;

    obj_file_ = obj_file;
    mtl_basedir_ = mtl_basedir;

    bool ret = tinyobj::LoadObj(
        &attrib_, &shapes_, &materials_,
        &warn, &err, obj_file.c_str(), mtl_basedir.c_str()
    );

    if (!warn.empty())
    {
      std::cout << warn << std::endl;
    }

    if (!err.empty())
    {
      std::cerr << err << std::endl;
      return false;
    }

    if (!ret)
    {
        return false;
    }
    else
    {
        updateFacesProperties();
        updateVerticesProperties();
        return true;
    }
}

void Mesh::printMeshStats()
{
    std::cout << "obj file: " << obj_file_ << std::endl;
    std::cout << "vertices: " << vertices_.rows()
              << " (" << attrib_.vertices.size() << ")" << std::endl;
    std::cout << "parsed faces: " << faces_.rows() << std::endl;

    std::cout << "shapes: " << shapes_.size() << std::endl;
    for (const auto &shape: shapes_)
    {
        std::cout << "shape faces: " << shape.mesh.num_face_vertices.size()
                  << std::endl;
    }
}

void Mesh::updateVerticesProperties()
{
    // 3 coordinates per point
    assert(attrib_.vertices.size() % 3 == 0);
    vertices_.resize(attrib_.vertices.size() / 3, Eigen::NoChange);
    size_t raw_idx = 0;
    for (size_t i = 0; i < vertices_.rows(); i++)
    {
        for (size_t j = 0; j < 3; j++)
        {
            vertices_(i, j) = attrib_.vertices[raw_idx];
            raw_idx += 1;
        }
    }
}

void Mesh::updateFacesProperties()
{
    size_t num_faces = 0;
    for (const auto &shape: shapes_)
    {
        num_faces += shape.mesh.num_face_vertices.size();
    }
    // num faces may not be the acutual number of faces
    std::vector< std::array<GLushort, 3> > faces_vector;
    faces_vector.reserve(num_faces);

    for (const auto &shape: shapes_)
    {
        size_t v_idx_offset = 0;
        const auto num_faces = shape.mesh.num_face_vertices.size();
        for (size_t f_idx = 0; f_idx < num_faces; f_idx++)
        {
            // each face can have different vertex count (eg quad, triangle et)
            const auto num_face_vertices = shape.mesh.num_face_vertices[f_idx];

            if (num_face_vertices != 3)
            {
                std::cerr << "Encountered face with "
                          << num_face_vertices << " vertices. "
                          << "Ignoring it" << std::endl;
                continue;
            }
            else
            {
                std::array<GLushort, 3> face_vertex_indices;
                for (size_t v_idx = 0; v_idx < num_face_vertices; v_idx++)
                {
                    const auto all_idx = shape.mesh.indices[v_idx_offset + v_idx];
                    face_vertex_indices[v_idx] = all_idx.vertex_index;
                }
                faces_vector.push_back(face_vertex_indices);
            }
            v_idx_offset += num_face_vertices;
        }
    }

    faces_.resize(faces_vector.size(), Eigen::NoChange);
    for (size_t i = 0; i < faces_vector.size(); i++)
    {
        for (size_t j = 0; j < 3; j++)
        {
            faces_(i, j) = faces_vector[i][j];
        }
    }
}

void Mesh::writePlyFile(const std::string &ply_filename)
{
    std::fstream fstream(ply_filename.c_str(), std::ofstream::out);
    fstream << "ply" << std::endl;
    fstream << "format ascii 1.0" << std::endl;
    fstream << "comment generated by p2mpp_depth_renderer" << std::endl;
    fstream << "element vertex " << vertices_.rows() << std::endl;
    fstream << "property float x" << std::endl;
    fstream << "property float y" << std::endl;
    fstream << "property float z" << std::endl;
    fstream << "element face " << faces_.rows() << std::endl;
    fstream << "property list uchar int vertex_index" << std::endl;
    fstream << "end_header" << std::endl;

    for (size_t i = 0; i < vertices_.rows(); i++)
    {
        for (size_t j = 0; j < 3; j++)
        {
            fstream << vertices_(i, j) << " ";
        }
        fstream << std::endl;
    }

    for (size_t i =0; i < faces_.rows(); i++)
    {
        fstream << "3 ";
        for (size_t j = 0; j < 3; j++)
        {
            fstream << faces_(i, j) << " ";
        }
        fstream << std::endl;
    }
}
